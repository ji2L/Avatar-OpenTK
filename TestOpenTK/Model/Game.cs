using System;
using System.IO;
using System.Linq;
using System.Drawing;
using System.Drawing.Imaging;
using System.Collections.Generic;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;

using TestOpenTK.Model;

namespace TestOpenTK
{
    class Game : GameWindow
    {
        #region Fields and constructor

        /// <summary>
        /// Strores every object that will be drawn.
        /// </summary>
        private List<Volume> objects = new List<Volume>();

        /// <summary>
        /// A camera instance.
        /// </summary>
        private Camera camera = new Camera();

        /// <summary>
        /// Contains the currently active shader.
        /// </summary>
        private string activeShader = "default";

        /// <summary>
        /// Stores shaders.
        /// </summary>
        private Dictionary<string, ShaderProgram> shaders = new Dictionary<string, ShaderProgram>();

        /// <summary>
        /// Stores the addresses of textures and their names.
        /// </summary>
        private Dictionary<string, int> textures = new Dictionary<string, int>();

        /// <summary>
        /// Stores the id of the vbo that contains the indices.
        /// </summary>
        private int ibo_elements;

        /// <summary>
        /// Stores the displayed data.
        /// </summary>
        private Vector3[] vertdata;
        private Vector3[] coldata;
        private Vector2[] texcoorddata;
        private int[] indicedata;

        /// <summary>
        /// Time variable used to move objects over time.
        /// </summary>
        private float time = 0.0f;

        /// <summary>
        /// Constructor : creates a 800*600 pixels window, with 32-bit color depth, 24 bits depth buffer, no stencil buffer, and 4x sampling for anti-aliasing
        /// </summary>
        public Game() : base(800, 600, new GraphicsMode(32, 24, 0, 4)) { }

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the program.
        /// </summary>
        public void InitProgram()
        {
            string texturesPath = "Model/Textures/";
            string objPath = "Model/BodyParts/";

            GL.GenBuffers(1, out ibo_elements);

            shaders.Add("default", new ShaderProgram("Model/Shaders/vs.glsl", "Model/Shaders/fs.glsl", true));
            shaders.Add("textured", new ShaderProgram("Model/Shaders/vs_tex.glsl", "Model/Shaders/fs_tex.glsl", true));

            activeShader = "textured";

            // Add every boddy parts to the list of objects that will be displayed and load their respective textures.
            foreach (string s in Directory.EnumerateFiles(objPath))
            {
                string partName = Path.GetFileNameWithoutExtension(s);

                ObjVolume obj = ObjVolume.LoadFromFile(s);
                textures.Add(partName, LoadImage(texturesPath + partName + ".png"));
                obj.TextureID = textures[partName];
                objects.Add(obj);
            }

            camera.Position += new Vector3(0f, 0f, 4f);
        }

        /// <summary>
        /// Loads a texture from a filename.
        /// </summary>
        /// <param name="filename">Path to the image.</param>
        /// <returns>Returns the id of the image generated by OpenGL. Also generates mipmaps for this texture.</returns>
        public int LoadImage(string filename)
        {
            try
            {
                Bitmap file = new Bitmap(filename);
                return LoadImage(file);
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine("The file " + filename + " was not found.");
                Console.WriteLine(e.ToString());
                return -1;
            }
        }

        /// <summary>
        /// Loads an image as a 2D texture.
        /// </summary>
        /// <param name="image">The texture as a bitmap.</param>
        /// <returns>Returns the id of the image generated by OpenGL. Also generates mipmaps for this texture.</returns>
        private int LoadImage(Bitmap image)
        {
            int texID = GL.GenTexture();

            GL.BindTexture(TextureTarget.Texture2D, texID);
            BitmapData data = image.LockBits(new System.Drawing.Rectangle(0, 0, image.Width, image.Height),
                ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);

            GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0,
                OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);

            image.UnlockBits(data);

            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);

            return texID;
        }

        #endregion

        #region Event handlers

        /// <summary>
        /// Called when the program is launched, calls InitProgram(), defines the title and the background.
        /// </summary>
        /// <param name="e">Event.</param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            InitProgram();

            Title = "Future Avatar";
            GL.ClearColor(new Color4(0.314f, 0.314f, 0.314f, 1.0f));

            GL.PointSize(5f);
        }

        /// <summary>
        /// Draws the scene.
        /// </summary>
        /// <param name="e">Event.</param>
        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.Viewport(0, 0, Width, Height);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);
            GL.Enable(EnableCap.DepthTest);

            shaders[activeShader].EnableVertexAttribArrays();

            // Draw every objects in the list.
            int indiceat = 0; // Used to keep track of the indices that should be used next.
            foreach (Volume v in objects)
            {
                GL.BindTexture(TextureTarget.Texture2D, v.TextureID);
                GL.UniformMatrix4(shaders[activeShader].GetUniform("modelview"), false, ref v.ModelViewProjectionMatrix);

                if (shaders[activeShader].GetAttribute("maintexture") != -1)
                {
                    GL.Uniform1(shaders[activeShader].GetAttribute("maintexture"), v.TextureID);
                }

                GL.DrawElements(PrimitiveType.Triangles, v.IndiceCount, DrawElementsType.UnsignedInt, indiceat * sizeof(uint));
                indiceat += v.IndiceCount;
            }

            shaders[activeShader].DisableVertexAttribArrays();

            GL.Flush();

            SwapBuffers();
        }

        /// <summary>
        /// Updates the scene.
        /// </summary>
        /// <param name="e">Event.</param>
        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);

            //Global lists for storing the data that will be drawn.
            List<Vector3> verts = new List<Vector3>();
            List<Vector3> colors = new List<Vector3>();
            List<Vector2> texcoords = new List<Vector2>();
            List<int> inds = new List<int>();

            // Add each objects data to global lists and keep track of their count.
            int vertcount = 0;
            foreach (Volume v in objects)
            {
                verts.AddRange(v.GetVerts().ToList());
                inds.AddRange(v.GetIndices(vertcount).ToList());
                texcoords.AddRange(v.GetTextureCoords());
                colors.AddRange(v.GetColorData().ToList());
                vertcount += v.VertCount;
            }

            // Global lists are passed to their respective fields as arrays so they can be bound.
            vertdata = verts.ToArray();
            coldata = colors.ToArray();
            texcoorddata = texcoords.ToArray();
            indicedata = inds.ToArray();

            // Bind the vertices
            GL.BindBuffer(BufferTarget.ArrayBuffer, shaders[activeShader].GetBuffer("vPosition"));
            GL.BufferData<Vector3>(BufferTarget.ArrayBuffer, (IntPtr)(vertdata.Length * Vector3.SizeInBytes), vertdata, BufferUsageHint.StaticDraw);
            GL.VertexAttribPointer(shaders[activeShader].GetAttribute("vPosition"), 3, VertexAttribPointerType.Float, false, 0, 0);

            // Bind the colors if they are specified.
            if (shaders[activeShader].GetAttribute("vColor") != -1)
            {
                GL.BindBuffer(BufferTarget.ArrayBuffer, shaders[activeShader].GetBuffer("vColor"));
                GL.BufferData<Vector3>(BufferTarget.ArrayBuffer, (IntPtr)(coldata.Length * Vector3.SizeInBytes), coldata, BufferUsageHint.StaticDraw);
                GL.VertexAttribPointer(shaders[activeShader].GetAttribute("vColor"), 3, VertexAttribPointerType.Float, true, 0, 0);
            }

            // Bind the textures coordinates if they are specified.
            if (shaders[activeShader].GetAttribute("texcoord") != -1)
            {
                GL.BindBuffer(BufferTarget.ArrayBuffer, shaders[activeShader].GetBuffer("texcoord"));
                GL.BufferData<Vector2>(BufferTarget.ArrayBuffer, (IntPtr)(texcoorddata.Length * Vector2.SizeInBytes), texcoorddata, BufferUsageHint.StaticDraw);
                GL.VertexAttribPointer(shaders[activeShader].GetAttribute("texcoord"), 2, VertexAttribPointerType.Float, true, 0, 0);
            }

            // Bind the indices.
            GL.BindBuffer(BufferTarget.ElementArrayBuffer, ibo_elements);
            GL.BufferData(BufferTarget.ElementArrayBuffer, (IntPtr)(indicedata.Length * sizeof(int)), indicedata, BufferUsageHint.StaticDraw);

            // Make the objects move.
            time += (float)e.Time;
            foreach(Volume v in objects)
            {
                v.Position = new Vector3(0.0f, 0.0f, -3.0f);
                v.Rotation = new Vector3(-(float)(Math.PI * time / 6), 0.0f, -(float)(Math.PI / 2));
                v.Scale = new Vector3(1.0f, 1.0f, 1.0f);
            }  

            // Projects every objects so they can be seen.
            foreach (Volume v in objects)
            {
                v.CalculateModelMatrix();
                v.ViewProjectionMatrix = camera.GetViewMatrix() * Matrix4.CreatePerspectiveFieldOfView(1.3f, ClientSize.Width / (float)ClientSize.Height, 1.0f, 40.0f);
                v.ModelViewProjectionMatrix = v.ModelMatrix * v.ViewProjectionMatrix;
            }

            GL.UseProgram(shaders[activeShader].ProgramID);

            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
        }

        /// <summary>
        /// Computes the new projection matriw when the window is resized.
        /// </summary>
        /// <param name="e">Event.</param>
        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            GL.Viewport(ClientRectangle.X, ClientRectangle.Y, ClientRectangle.Width, ClientRectangle.Height);

            Matrix4 projection = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI / 4, Width / (float)Height, 1.0f, 64.0f);

            GL.MatrixMode(MatrixMode.Projection);

            GL.LoadMatrix(ref projection);
        }

        #endregion
    }
}
